#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
from bs4 import BeautifulSoup

__author__     = "Leon Schnieber"
__copyright__  = "Copyright 2018"
__credits__    = "fischertechnik GmbH"
__maintainer__ = "Leon Schnieber"
__email__      = "olaginos-buero@outlook.de"
__status__     = "Developement"


class RoboProObject(object):
    """
    This object can be either generated by an XML-String or via the attributes
    itself. Therefor objectXmlSoup has to be None so the attributes can be set
    manually. This feature is mainly used for Pseudo-Objects used on converging
    wires.
    """
    def __init__(self, objectXmlSoup=None):
        self._objectRaw = objectXmlSoup
        self._type = None  # Category of the block, e.g. ftProProcessStart
        self._id = ""  # Internal ID given in the XML-Structure
        self._pins = []  # list of data- and flow-connection-pins
        if self._objectRaw is not None:
            self.parse()

    def __repr__(self):
        return "RoObj_" + self._id + "_" + self._type

    def parse(self):
        '''
        Extract all necessary informations about this Diagram-Block out of the
        given XML-Structure and store it in different Variables.
        '''
        self._type = self._objectRaw.attrs["classname"]
        try:
            self._id = self._objectRaw.attrs["id"]
        except KeyError:
            self._id = ""
        pinList = self._objectRaw.find_all("o", attrs=
            {"classname": "ftProObjectPin"})
        for pin in pinList:
            pinData = {
                "id": pin.attrs["id"],
                "pinid": pin.attrs["pinid"],
                "name": pin.attrs["name"],
                "pinclass": pin.attrs["pinclass"]
            }
            self._pins.append(pinData)

    def getPinIdByClass(self, pinclass):
        '''
        Fetch and return all connection pins of a given type
        '''
        return self.getPinIdByAttr("pinclass", pinclass)

    def getPinIdByAttr(self, attr, value):
        '''
        Fetch and return all connection pins of a given type and value
        '''
        list = []
        for pin in self._pins:
            if value in pin[attr]:
                list.append(pin["id"])
        return list

    def run(self, data, inputID=None):
        '''
        This function is called by the Subroutine-Object. Depending on its object
        type it takes additional input arguments (e.g. Input-Sensors or variables)
        and returns the next coutputID (e.g. important for an if-else-Block).
        Additionally it may return additional Arguments, e.g. for Motor-Outputs.
        '''
        outputID = None
        arguments = {}
        if self._type == "ftProProcessStart": # program start block
            outputID = self.getPinIdByClass("flowobjectoutput")[0]
        elif self._type == "ftProFlowIf":  # if block
            # Get Pin-IDs for the Yes-Outputs and No-Outputs
            outYes = self.getPinIdByAttr("name", "J")
            outNo = self.getPinIdByAttr("name", "N")
            if data is not None:
                # try to backpropagate
                pinIDin = self.getPinIdByClass("dataobjectinput")[0]
                value = self.calculateDataValue(data, pinIDin)

        elif self._type == "ftProDataIn": # sensor/data-in block
            # fetch type dependent settings
            IFaceNumber = self._objectRaw.attrs["module"]
            IFacePortNo = self._objectRaw.attrs["input"]
            IFacePortMode = self._objectRaw.attrs["inputMode"]
            arguments["value"] = "foo"
        else:
            print(self._type)
        return outputID, arguments

    def calculateDataValue(self, data, pinIDin):
        '''
        This function is especially important for objects who use data-flow-wires
        to get their information. It tries to backfollow the orange connections
        to their origins.
        '''
        dataInBack = data._followWireReverse(pinIDin)
        pins, objectBack = data._findObject(dataInBack)
        return objectBack.run(data)
